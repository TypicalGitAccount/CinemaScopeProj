using MovieService.Repositories;
using System.Web.Mvc;
using MovieService.Interfaces;
using CinemaScopeWeb.ViewModels;
using Imdb;
using Microsoft.AspNet.Identity;
using MovieService.Entities;
>>>>>>> user-with-movie-interaction-feature

namespace CinemaScopeWeb.Controllers
{
    public class MoviesController : Controller
    {
        MovieRepository _movieRepository;
        private UserToMovieRepository _userToMovieRepository;
        private ImdbService _imdbService;
        IRatingService _ratingService;

        public MoviesController(MovieRepository movieRepo, UserToMovieRepository userToMovieRepository, ImdbService imdbService, IRatingService ratingService) 
        { 
            _movieRepository = movieRepo;
            _imdbService = imdbService;
            _ratingService = ratingService;
            _userToMovieRepository = userToMovieRepository;
        }

        public ActionResult Get(int id)
        {
            var movie = new MovieViewModel() {Movie = _movieRepository.GetById(id)};
            var userId = User.Identity.GetUserId();
            var userToMovie = _userToMovieRepository.GetOneByUserAndMovieIds(userId, id);
            if (User.Identity.IsAuthenticated && !(userToMovie is null))
            {
                movie.IsLiked = userToMovie.IsLiked;
                movie.IsWatched = userToMovie.IsWatched;
                movie.IsDisliked = userToMovie.IsDisLiked;
            }
            return movie == null ? View("NoMovie") : View(movie);
        }

        [Authorize]
        public ActionResult LikeMovie(int id)
        {
            var movie = _movieRepository.GetById(id);
            var userId = User.Identity.GetUserId();
            var userToMovie = _userToMovieRepository.GetOneByUserAndMovieIds(userId, id);
            if (userToMovie is null)
            {
                userToMovie = new UserToMovie()
                {
                    IsDisLiked = false,
                    ApplicationUserId = userId,
                    IsLiked = true,
                    IsWatched = false,
                    MovieId = id
                };
                _userToMovieRepository.Add(userToMovie);
            }
            else if (userToMovie.IsLiked)
            {
                userToMovie.IsLiked = false;
                _userToMovieRepository.Update(userToMovie);
                if (!userToMovie.IsWatched)
                    _userToMovieRepository.Delete(userToMovie);
                _userToMovieRepository.Save();
            }
            else
            {
                if (userToMovie.IsDisLiked)
                    userToMovie.IsDisLiked = false;
                userToMovie.IsLiked = true;
                _userToMovieRepository.Update(userToMovie);
                _userToMovieRepository.Save();
            }
            var movieViewModel = new MovieViewModel()
            {
                Movie = movie,
                IsDisliked = userToMovie.IsDisLiked,
                IsLiked = userToMovie.IsLiked,
                IsWatched = userToMovie.IsWatched
            };
            return View("Get", movieViewModel);
        }

        [Authorize]
        public ActionResult DislikeMovie(int id)
        {
            var movie = _movieRepository.GetById(id);
            var userId = User.Identity.GetUserId();
            var userToMovie = _userToMovieRepository.GetOneByUserAndMovieIds(userId, id);
            if (userToMovie is null)
            {
                userToMovie = new UserToMovie()
                {
                    IsDisLiked = true,
                    ApplicationUserId = userId,
                    IsLiked = false,
                    IsWatched = false,
                    MovieId = id
                };
                _userToMovieRepository.Add(userToMovie);
            }
            else if (userToMovie.IsDisLiked)
            {
                userToMovie.IsDisLiked = false;
                _userToMovieRepository.Update(userToMovie);
                if (!userToMovie.IsWatched)
                    _userToMovieRepository.Delete(userToMovie);
                _userToMovieRepository.Save();
            }
            else
            {
                if (userToMovie.IsLiked)
                    userToMovie.IsLiked = false;
                userToMovie.IsDisLiked = true;
                _userToMovieRepository.Update(userToMovie);
                _userToMovieRepository.Save();
            }
            var movieViewModel = new MovieViewModel()
            {
                Movie = movie,
                IsDisliked = userToMovie.IsDisLiked,
                IsLiked = userToMovie.IsLiked,
                IsWatched = userToMovie.IsWatched
            };
            return View("Get", movieViewModel);
        }

        [Authorize]
        public ActionResult MarkAsWatched(int id)
        {
            var movie = _movieRepository.GetById(id);
            var userId = User.Identity.GetUserId();
            var userToMovie = _userToMovieRepository.GetOneByUserAndMovieIds(userId, id);
            
            if (userToMovie is null)
            {
                userToMovie = new UserToMovie()
                {
                    IsDisLiked = false,
                    ApplicationUserId = userId,
                    IsLiked = false,
                    IsWatched = true,
                    MovieId = id
                };
                _userToMovieRepository.Add(userToMovie);
            }
            else if (userToMovie.IsWatched)
            {
                userToMovie.IsWatched = false;
                _userToMovieRepository.Update(userToMovie);
                if (!userToMovie.IsDisLiked&&!userToMovie.IsLiked)
                    _userToMovieRepository.Delete(userToMovie);
                _userToMovieRepository.Save();
            }
            else
            {
                userToMovie.IsWatched = true;
                _userToMovieRepository.Update(userToMovie);
                _userToMovieRepository.Save();
            }
            var movieViewModel = new MovieViewModel() 
            { 
                    Movie = movie, 
                    IsDisliked = userToMovie.IsDisLiked, 
                    IsLiked = userToMovie.IsLiked, 
                    IsWatched = userToMovie.IsWatched
            };

            return View("Get", movieViewModel);
        }

        public ActionResult Top250()
        {
            var data = _imdbService.GetTop250();
            if (!string.IsNullOrEmpty(data.ErrorMessage))
                return View("Error");
            return View(data.Items);
        }

        public ActionResult MostWatched()
        {
            return View(_ratingService.MostWatched());
        }

        public ActionResult MostLiked()
        {
            return View(_ratingService.MostLiked());
        }
    }
}